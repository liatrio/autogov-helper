---
name: Build and Test

on:
  pull_request:
    branches: [main]
  push:
    paths-ignore:
      - README.md
      - catalog-info.yaml
      - renovate.json
    tags:
      - v*

env:
  GITHUB_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5
        with:
          go-version: "1.23.4"
          cache: true
          cache-dependency-path: go.sum
      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@ec5d18412c0aeab7936cb16880d708ba2a64e1ae # v6
        with:
          version: v1.62.0
          args: --timeout=5m
          only-new-issues: true
      - name: Run linter
        run: golangci-lint run
  test:
    name: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs: [lint]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "1.23.4"
          cache: true
          cache-dependency-path: go.sum
      - name: Run tests
        run: make test
      - name: Upload coverage report
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: coverage-report
          path: coverage.out

  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    needs: [test]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "1.23.4"
          cache: true
          cache-dependency-path: go.sum
      - name: Build
        run: |
          mkdir -p bin
          VERSION=${{ github.ref_name }}
          if [[ "${{ github.ref_type }}" == "branch" ]]; then
            VERSION="${VERSION}-${GITHUB_SHA::8}"
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          go build -ldflags "-X main.version=${VERSION}" -o bin/gh-attest-util .
      - name: Install Binary
        run: |
          sudo cp bin/gh-attest-util /usr/local/bin/
          gh-attest-util --help
      - name: Upload binary
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: gh-attest-util
          path: bin/gh-attest-util

  test-attestations:
    name: test-attestations
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Download binary
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: gh-attest-util
          path: bin
      - name: Install Binary
        run: |
          chmod +x bin/gh-attest-util
          sudo cp bin/gh-attest-util /usr/local/bin/
          gh-attest-util --help
      - name: Create test file
        run: echo "test content" > test-file.txt
      - name: Generate blob metadata
        env:
          GH_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
          GITHUB_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
        run: |
          gh-attest-util metadata \
            --type blob \
            --subject-path test-file.txt \
            --output blob-metadata.json
      - name: Verify blob metadata
        run: |
          echo "Generated blob metadata:"
          cat blob-metadata.json | jq '.'
          test -f blob-metadata.json
      - name: Generate container metadata
        env:
          GH_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
          GITHUB_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
        run: |
          gh-attest-util metadata \
            --type image \
            --subject-name ghcr.io/test-org/test-repo \
            --subject-digest sha256:test \
            --output container-metadata.json
      - name: Verify container metadata
        run: |
          echo "Generated container metadata:"
          cat container-metadata.json | jq '.'
          test -f container-metadata.json
      - name: Create test grype results
        run: |
          cat << EOF > results.json
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.5",
            "version": 1,
            "metadata": {
              "timestamp": "2024-03-14T12:00:00Z",
              "tools": [
                {
                  "vendor": "anchore",
                  "name": "grype",
                  "version": "0.74.7"
                }
              ]
            },
            "vulnerabilities": [
              {
                "id": "CVE-2024-1234",
                "source": {
                  "name": "nvd",
                  "url": "https://nvd.nist.gov"
                },
                "ratings": [
                  {
                    "source": {
                      "name": "nvd"
                    },
                    "score": 7.5,
                    "severity": "HIGH",
                    "method": "CVSSv3"
                  }
                ]
              }
            ]
          }
          EOF
      - name: Generate depscan attestation
        env:
          GH_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
          GITHUB_TOKEN: ${{ secrets.UTIL_REPO_ACCESS }}
        run: |
          gh-attest-util depscan \
            --results-path results.json \
            --subject-name test-image:latest \
            --digest sha256:test \
            --output depscan.json
      - name: Verify depscan attestation
        run: |
          echo "Generated depscan attestation:"
          cat depscan.json | jq '.'
          test -f depscan.json
